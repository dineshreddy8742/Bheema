<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agricultural Market Prices</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
        }

        .commodity-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .commodity-item {
            text-align: center;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .commodity-item:hover {
            border-color: #3498db;
            transform: translateY(-2px);
        }

        .commodity-item.selected {
            border-color: #e74c3c;
            background-color: #ffeaea;
        }

        .commodity-item img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .filters {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        select, button {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        button {
            background: #3498db;
            color: white;
            border: none;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
        }

        button:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }

        .market-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .market-card {
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .market-card:hover {
            border-color: #3498db;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .market-card.selected {
            border-color: #e74c3c;
            background-color: #ffeaea;
        }

        .historical-data {
            margin-top: 30px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f8f9fa;
            font-weight: bold;
        }

        .chart-container {
            height: 400px;
            margin-top: 20px;
        }

        .hidden {
            display: none;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .price-comparison {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .comparison-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 10px;
        }

        .comparison-item {
            text-align: center;
            padding: 10px;
            background: white;
            border-radius: 5px;
            border-left: 4px solid #3498db;
        }

        .price-up {
            color: #e74c3c;
            font-weight: bold;
        }

        .price-down {
            color: #27ae60;
            font-weight: bold;
        }

        .price-same {
            color: #3498db;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Agricultural Market Prices (per 10 kgs)</h1>
        
        <!-- Commodity Selection -->
        <div class="commodity-grid" id="commodityGrid">
            <div class="commodity-item" data-commodity="Tomato">
                <img src="https://via.placeholder.com/80x80/FF6B6B/FFFFFF?text=Tomato" alt="Tomato">
                <div>Tomato</div>
            </div>
            <div class="commodity-item" data-commodity="Potato">
                <img src="https://via.placeholder.com/80x80/4ECDC4/FFFFFF?text=Potato" alt="Potato">
                <div>Potato</div>
            </div>
            <div class="commodity-item" data-commodity="Green Chilli">
                <img src="https://via.placeholder.com/80x80/45B7D1/FFFFFF?text=Chilli" alt="Green Chilli">
                <div>Green Chilli</div>
            </div>
            <div class="commodity-item" data-commodity="Rice">
                <img src="https://via.placeholder.com/80x80/F7DC6F/FFFFFF?text=Rice" alt="Rice">
                <div>Rice</div>
            </div>
            <div class="commodity-item" data-commodity="Cabbage">
                <img src="https://via.placeholder.com/80x80/BB8FCE/FFFFFF?text=Cabbage" alt="Cabbage">
                <div>Cabbage</div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="filters hidden" id="filtersSection">
            <select id="state">
                <option value="">Select State</option>
            </select>
            <select id="district">
                <option value="">Select District</option>
            </select>
            <button onclick="fetchMarketData()">Search Markets</button>
            <button onclick="useCurrentLocation()">Use My Location</button>
        </div>

        <!-- Markets Grid -->
        <div class="market-grid hidden" id="marketsSection">
            <!-- Markets will be populated here -->
        </div>

        <!-- Historical Data Section -->
        <div class="historical-data hidden" id="historicalSection">
            <h3>Historical Data - Last 4 Days (Prices per 10 kgs)</h3>
            <div id="marketInfo"></div>
            
            <!-- Price Comparison Summary -->
            <div class="price-comparison hidden" id="priceComparison">
                <h4>Price Comparison Summary</h4>
                <div class="comparison-grid" id="comparisonGrid"></div>
            </div>

            <table id="historicalTable">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Min Price (₹/10kg)</th>
                        <th>Max Price (₹/10kg)</th>
                        <th>Modal Price (₹/10kg)</th>
                        <th>Price Change</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <div class="chart-container">
                <canvas id="priceChart"></canvas>
            </div>
        </div>

        <div class="loading hidden" id="loading">Loading data...</div>
    </div>

    <script>
        const apiKey = "579b464db66ec23bdd0000011cf3d78fcf494f4164cdccb8704c30e8";
        let allRecords = [];
        let selectedCommodity = '';
        let selectedMarket = null;
        let priceChart = null;
        let historicalDataCache = new Map();

        // Initialize on page load
        window.onload = function() {
            loadInitialData();
            setupEventListeners();
        };

        function setupEventListeners() {
            // Commodity selection
            document.querySelectorAll('.commodity-item').forEach(item => {
                item.addEventListener('click', function() {
                    selectCommodity(this.dataset.commodity);
                });
            });
        }

        function selectCommodity(commodity) {
            selectedCommodity = commodity;
            
            // Update UI
            document.querySelectorAll('.commodity-item').forEach(item => {
                item.classList.remove('selected');
            });
            event.currentTarget.classList.add('selected');
            
            // Show filters section
            document.getElementById('filtersSection').classList.remove('hidden');
            document.getElementById('marketsSection').classList.add('hidden');
            document.getElementById('historicalSection').classList.add('hidden');
        }

        async function loadInitialData() {
            const url = `https://api.data.gov.in/resource/9ef84268-d588-465a-a308-a864a43d0070?api-key=${apiKey}&format=json&limit=10000`;
            try {
                document.getElementById('loading').classList.remove('hidden');
                const res = await fetch(url);
                const data = await res.json();
                allRecords = data.records;
                populateStates(data.records);
                document.getElementById('loading').classList.add('hidden');
            } catch (err) {
                console.error("Error fetching initial data:", err);
                document.getElementById('loading').classList.add('hidden');
            }
        }

        function populateStates(records) {
            const stateSelect = document.getElementById("state");
            const states = [...new Set(records.map(rec => rec.state))].sort();

            states.forEach(state => {
                const option = document.createElement("option");
                option.value = state;
                option.textContent = state;
                stateSelect.appendChild(option);
            });
        }

        document.getElementById("state").addEventListener("change", function() {
            const selectedState = this.value;
            populateDistricts(selectedState);
        });

        function populateDistricts(state) {
            const districtSelect = document.getElementById("district");
            districtSelect.innerHTML = '<option value="">Select District</option>';

            const districts = [...new Set(
                allRecords
                    .filter(rec => rec.state === state)
                    .map(rec => rec.district)
            )].sort();

            districts.forEach(district => {
                const option = document.createElement("option");
                option.value = district;
                option.textContent = district;
                districtSelect.appendChild(option);
            });
        }

        // Convert price to per 10 kgs (assuming original price is per quintal/100kg)
        function convertTo10Kgs(price) {
            return Math.round((price / 10) * 100) / 100;
        }

        function getPriceChange(current, previous) {
            if (!previous) return { change: 0, percent: 0, type: 'same' };
            
            const change = current - previous;
            const percent = previous !== 0 ? ((change / previous) * 100) : 0;
            
            if (change > 0) return { change, percent, type: 'up' };
            if (change < 0) return { change, percent, type: 'down' };
            return { change, percent, type: 'same' };
        }

        function getPriceChangeHTML(change, type) {
            if (type === 'up') return `<span class="price-up">↑ +₹${Math.abs(change)}</span>`;
            if (type === 'down') return `<span class="price-down">↓ -₹${Math.abs(change)}</span>`;
            return `<span class="price-same">→ No change</span>`;
        }

        async function fetchMarketData() {
            const state = document.getElementById("state").value;
            const district = document.getElementById("district").value;

            if (!state || !district || !selectedCommodity) {
                alert("Please select commodity, state, and district");
                return;
            }

            document.getElementById('loading').classList.remove('hidden');

            try {
                // Fetch fresh data for the specific commodity and location
                const url = `https://api.data.gov.in/resource/9ef84268-d588-465a-a308-a864a43d0070?api-key=${apiKey}&format=json&limit=1000&filters[state]=${encodeURIComponent(state)}&filters[district]=${encodeURIComponent(district)}&filters[commodity]=${encodeURIComponent(selectedCommodity)}`;
                
                const response = await fetch(url);
                const data = await response.json();
                
                const filteredRecords = data.records || [];

                // Store the fetched data temporarily for historical data
                storeTemporaryData(state, district, selectedCommodity, filteredRecords);

                // Get unique markets
                const markets = [...new Set(filteredRecords.map(rec => rec.market))];

                displayMarkets(markets, filteredRecords);
                document.getElementById('marketsSection').classList.remove('hidden');
                document.getElementById('historicalSection').classList.add('hidden');

            } catch (err) {
                console.error("Error fetching market data:", err);
            } finally {
                document.getElementById('loading').classList.add('hidden');
            }
        }

        // Store data temporarily for historical analysis
        function storeTemporaryData(state, district, commodity, records) {
            const key = `${state}-${district}-${commodity}`;
            historicalDataCache.set(key, {
                records: records,
                timestamp: Date.now(),
                state: state,
                district: district,
                commodity: commodity
            });
            
            // Clear cache after 1 hour (optional)
            setTimeout(() => {
                historicalDataCache.delete(key);
            }, 60 * 60 * 1000);
        }

        // Get stored historical data
        function getStoredHistoricalData(state, district, commodity) {
            const key = `${state}-${district}-${commodity}`;
            return historicalDataCache.get(key);
        }

        function displayMarkets(markets, records) {
            const marketsSection = document.getElementById("marketsSection");
            marketsSection.innerHTML = '';

            if (markets.length === 0) {
                marketsSection.innerHTML = '<div class="no-data">No markets found for selected criteria</div>';
                return;
            }

            markets.forEach(market => {
                const marketRecords = records.filter(rec => rec.market === market);
                const latestDate = getLatestDate(marketRecords);
                
                const marketCard = document.createElement("div");
                marketCard.className = "market-card";
                marketCard.innerHTML = `
                    <h4>${market}</h4>
                    <p><strong>Commodity:</strong> ${selectedCommodity}</p>
                    <p><strong>Latest Date:</strong> ${latestDate}</p>
                    <p><strong>Records Available:</strong> ${marketRecords.length} days</p>
                `;
                marketCard.addEventListener('click', () => selectMarket(market));
                marketsSection.appendChild(marketCard);
            });
        }

        function getLatestDate(marketRecords) {
            if (marketRecords.length === 0) return 'No data';
            
            const latestRecord = marketRecords.reduce((latest, current) => {
                return new Date(current.arrival_date.split('/').reverse().join('-')) > 
                       new Date(latest.arrival_date.split('/').reverse().join('-')) ? current : latest;
            });
            
            return latestRecord.arrival_date;
        }

        async function selectMarket(market) {
            selectedMarket = market;
            
            // Update UI
            document.querySelectorAll('.market-card').forEach(card => {
                card.classList.remove('selected');
            });
            event.currentTarget.classList.add('selected');
            
            document.getElementById('historicalSection').classList.remove('hidden');
            document.getElementById('loading').classList.remove('hidden');

            try {
                const state = document.getElementById('state').value;
                const district = document.getElementById('district').value;
                
                // Try to get historical data from cache first
                const storedData = getStoredHistoricalData(state, district, selectedCommodity);
                let historicalData = [];

                if (storedData && storedData.records) {
                    // Use cached data
                    historicalData = await processHistoricalData(market, storedData.records);
                } else {
                    // Fetch fresh historical data
                    historicalData = await fetchFreshHistoricalData(state, district, market);
                }

                displayHistoricalData(historicalData);
                displayPriceComparison(historicalData);
                renderPriceChart(historicalData);
                
            } catch (err) {
                console.error("Error fetching historical data:", err);
            } finally {
                document.getElementById('loading').classList.add('hidden');
            }
        }

        async function processHistoricalData(market, records) {
            const marketRecords = records.filter(rec => rec.market === market);
            
            if (marketRecords.length === 0) {
                return [];
            }

            // Sort by date descending and get last 4 unique dates
            const sortedRecords = marketRecords.sort((a, b) => 
                new Date(b.arrival_date.split('/').reverse().join('-')) - 
                new Date(a.arrival_date.split('/').reverse().join('-'))
            );

            // Get last 4 unique dates
            const uniqueDates = [];
            const dateMap = new Map();
            
            sortedRecords.forEach(record => {
                if (!dateMap.has(record.arrival_date) && uniqueDates.length < 4) {
                    dateMap.set(record.arrival_date, true);
                    uniqueDates.push(record.arrival_date);
                }
            });

            // Process data for these dates
            const historicalData = [];
            for (const date of uniqueDates) {
                const record = marketRecords.find(rec => rec.arrival_date === date);
                if (record) {
                    historicalData.push({
                        date: record.arrival_date,
                        min_price: convertTo10Kgs(parseInt(record.min_price) || 0),
                        max_price: convertTo10Kgs(parseInt(record.max_price) || 0),
                        modal_price: convertTo10Kgs(parseInt(record.modal_price) || 0),
                        variety: record.variety,
                        grade: record.grade
                    });
                }
            }

            return historicalData.sort((a, b) => 
                new Date(a.date.split('/').reverse().join('-')) - 
                new Date(b.date.split('/').reverse().join('-'))
            );
        }

        async function fetchFreshHistoricalData(state, district, market) {
            // Fetch data specifically for historical analysis
            const url = `https://api.data.gov.in/resource/9ef84268-d588-465a-a308-a864a43d0070?api-key=${apiKey}&format=json&limit=100&filters[state]=${encodeURIComponent(state)}&filters[district]=${encodeURIComponent(district)}&filters[commodity]=${encodeURIComponent(selectedCommodity)}&filters[market]=${encodeURIComponent(market)}`;
            
            const response = await fetch(url);
            const data = await response.json();
            
            return processHistoricalData(market, data.records || []);
        }

        function displayHistoricalData(data) {
            const tableBody = document.querySelector("#historicalTable tbody");
            tableBody.innerHTML = "";

            if (data.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="5">No historical data available for the last 4 days</td></tr>`;
                return;
            }

            data.forEach((record, index) => {
                const row = document.createElement("tr");
                let priceChange = '';
                
                if (index > 0) {
                    const prevModal = data[index - 1].modal_price;
                    const currentModal = record.modal_price;
                    const change = getPriceChange(currentModal, prevModal);
                    priceChange = getPriceChangeHTML(change.change, change.type);
                }

                row.innerHTML = `
                    <td><strong>${record.date}</strong></td>
                    <td>₹${record.min_price}</td>
                    <td>₹${record.max_price}</td>
                    <td><strong>₹${record.modal_price}</strong></td>
                    <td>${priceChange || '-'}</td>
                `;
                tableBody.appendChild(row);
            });

            // Update market info
            const latestRecord = data[data.length - 1];
            document.getElementById('marketInfo').innerHTML = `
                <div style="background: #2c3e50; color: white; padding: 15px; border-radius: 8px;">
                    <h4>${selectedMarket} Market - ${selectedCommodity}</h4>
                    <p><strong>State:</strong> ${document.getElementById('state').value} | 
                    <strong>District:</strong> ${document.getElementById('district').value}</p>
                    <p><strong>Latest Data:</strong> ${latestRecord.date} | 
                    <strong>Variety:</strong> ${latestRecord.variety} | 
                    <strong>Grade:</strong> ${latestRecord.grade}</p>
                    <p><em>Prices shown per 10 kgs</em></p>
                </div>
            `;
        }

        function displayPriceComparison(data) {
            const comparisonGrid = document.getElementById('comparisonGrid');
            comparisonGrid.innerHTML = '';

            if (data.length < 2) {
                document.getElementById('priceComparison').classList.add('hidden');
                return;
            }

            document.getElementById('priceComparison').classList.remove('hidden');

            const latest = data[data.length - 1];
            const previous = data[data.length - 2];

            const comparisons = [
                {
                    title: 'Modal Price',
                    current: latest.modal_price,
                    previous: previous.modal_price,
                    unit: '₹'
                },
                {
                    title: 'Min Price',
                    current: latest.min_price,
                    previous: previous.min_price,
                    unit: '₹'
                },
                {
                    title: 'Max Price',
                    current: latest.max_price,
                    previous: previous.max_price,
                    unit: '₹'
                },
                {
                    title: 'Price Range',
                    current: latest.max_price - latest.min_price,
                    previous: previous.max_price - previous.min_price,
                    unit: '₹'
                }
            ];

            comparisons.forEach(comp => {
                const change = getPriceChange(comp.current, comp.previous);
                
                const item = document.createElement('div');
                item.className = 'comparison-item';
                item.innerHTML = `
                    <div style="font-weight: bold">${comp.title}</div>
                    <div style="font-size: 1.2em; margin: 5px 0">${comp.unit}${comp.current}</div>
                    <div>${getPriceChangeHTML(change.change, change.type)}</div>
                    <div style="font-size: 0.9em; color: #666">Previous: ${comp.unit}${comp.previous}</div>
                `;
                comparisonGrid.appendChild(item);
            });
        }

        function renderPriceChart(data) {
            const ctx = document.getElementById('priceChart').getContext('2d');
            
            // Destroy existing chart
            if (priceChart) {
                priceChart.destroy();
            }

            if (data.length === 0) return;

            priceChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.map(d => d.date),
                    datasets: [
                        {
                            label: 'Min Price (₹/10kg)',
                            data: data.map(d => d.min_price),
                            borderColor: '#e74c3c',
                            backgroundColor: 'rgba(231, 76, 60, 0.1)',
                            borderWidth: 2,
                            tension: 0.4,
                            fill: false
                        },
                        {
                            label: 'Max Price (₹/10kg)',
                            data: data.map(d => d.max_price),
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.1)',
                            borderWidth: 2,
                            tension: 0.4,
                            fill: false
                        },
                        {
                            label: 'Modal Price (₹/10kg)',
                            data: data.map(d => d.modal_price),
                            borderColor: '#2ecc71',
                            backgroundColor: 'rgba(46, 204, 113, 0.1)',
                            borderWidth: 3,
                            tension: 0.4,
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: 'Price (₹ per 10 kgs)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: `${selectedMarket} Market - Price Trends (Last ${data.length} Days)`
                        }
                    }
                }
            });
        }

        function useCurrentLocation() {
            if (!navigator.geolocation) {
                alert("Geolocation not supported.");
                return;
            }

            navigator.geolocation.getCurrentPosition(async (position) => {
                const { latitude, longitude } = position.coords;

                try {
                    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);
                    const data = await response.json();

                    const state = data.address.state;
                    const district = data.address.county || data.address.district;

                    // Set values in dropdowns
                    const stateSelect = document.getElementById("state");
                    stateSelect.value = state;
                    populateDistricts(state);

                    setTimeout(() => {
                        const districtSelect = document.getElementById("district");
                        if (district) districtSelect.value = district;
                    }, 500);

                } catch (error) {
                    console.error("Error during reverse geocoding:", error);
                }
            }, (err) => {
                console.warn("Geolocation error:", err.message);
            });
        }
    </script>
</body>
</html>

