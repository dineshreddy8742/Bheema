<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Crop Recommendation System</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .api-status {
      transition: all 0.3s ease;
    }
    .dark-mode {
      background-color: #1a202c !important;
      color: #e2e8f0 !important;
    }
    .dark-mode .bg-white {
      background-color: #2d3748 !important;
    }
    .dark-mode .bg-gray-100 {
      background-color: #1a202c !important;
    }
    .dark-mode .text-gray-800 {
      color: #e2e8f0 !important;
    }
    .dark-mode .bg-blue-50 {
      background-color: #2a4365 !important;
    }
  </style>
</head>
<body class="bg-gray-100 text-gray-800">

  <!-- Navbar -->
  <nav class="bg-blue-50 shadow px-4 py-2 flex justify-between items-center sticky top-0 z-50 h-14">
    <div class="flex items-center gap-2">
      <div class="w-28 h-8 bg-green-500 rounded flex items-center justify-center text-white font-bold">
        üåæ KRISHI
      </div>
      <!-- üåê Google Translate Dropdown -->
      <div id="google_translate_element" class="ml-2"></div>
    </div>
    <div class="flex items-center gap-6 text-base font-medium">
      <button id="theme-toggle" class="text-xl">üåô</button>
      <a href="index.html" class="hover:text-green-600">Crop Monitoring</a>
      <a href="cropd.html" class="hover:text-green-600">Disease Detection</a>
      <a href="recomendation.html" class="hover:text-green-600 font-semibold text-green-700">Recommendation</a>
      <select id="moreDropdown" class="border rounded px-3 py-1.5 text-base">
        <option disabled selected>More</option>
        <option value="marketprice.html">Market Price</option>
        <option value="chatbot.html">Chatbot</option>
        <option value="ecommerce.html">Fertilizer Info</option>
      </select>
    </div>
  </nav>

  <!-- API Status -->
  <div id="apiStatus" class="api-status mx-6 mt-4 p-3 rounded text-sm hidden">
    <!-- API status will appear here -->
  </div>

  <!-- Main Content: Form + Blank Box -->
  <div class="flex flex-col md:flex-row gap-6 p-6">
    
    <!-- Left Side: Form -->
    <div class="w-full md:w-1/2 bg-white p-6 rounded-lg shadow-lg">
      <h1 class="text-2xl font-bold text-green-700 mb-4 text-center">üåæ Crop Recommendation System</h1>

      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700">üß™ Nitrogen (N)</label>
          <input type="number" id="n" class="w-full p-2 border rounded mt-1" placeholder="e.g. 90" min="0" max="140">
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">üß™ Phosphorus (P)</label>
          <input type="number" id="p" class="w-full p-2 border rounded mt-1" placeholder="e.g. 40" min="0" max="145">
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">üß™ Potassium (K)</label>
          <input type="number" id="k" class="w-full p-2 border rounded mt-1" placeholder="e.g. 43" min="0" max="205">
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">üå° Temperature (¬∞C)</label>
          <input type="number" id="temperature" class="w-full p-2 border rounded mt-1" placeholder="e.g. 25.6" min="-10" max="50" step="0.1">
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">üíß Humidity (%)</label>
          <input type="number" id="humidity" class="w-full p-2 border rounded mt-1" placeholder="e.g. 80" min="0" max="100" step="0.1">
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">üå± Soil pH</label>
          <input type="number" id="ph" class="w-full p-2 border rounded mt-1" placeholder="e.g. 6.5" min="0" max="14" step="0.1">
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">üåß Rainfall (mm)</label>
          <input type="number" id="rainfall" class="w-full p-2 border rounded mt-1" placeholder="e.g. 200" min="0" max="500" step="0.1">
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">üçÇ Season</label>
          <select id="season" class="w-full p-2 border rounded mt-1">
            <option value="Summer">Summer</option>
            <option value="Winter">Winter</option>
            <option value="Autumn">Autumn</option>
            <option value="Spring" selected>Spring</option>
            <option value="Monsoon">Monsoon</option>
          </select>
        </div>

        <button onclick="recommendCrop()" class="mt-2 w-full bg-green-600 hover:bg-green-700 text-white py-3 rounded-lg font-semibold transition duration-300">
          üåü Get Crop Recommendation
        </button>
      </div>

      <div class="mt-6 p-4 rounded shadow" id="result">
        <div class="text-center text-gray-500">
          Enter soil and weather data to get crop recommendation
        </div>
      </div>
    </div>

    <!-- Right Side: Crop Scheduler -->
    <div class="w-full md:w-1/2 bg-white rounded-xl shadow-xl p-6">
      <h1 class="text-2xl font-bold text-gray-800 mb-4">üåø Crop Scheduler</h1>

      <!-- Search Bar -->
      <input type="text" id="crop-search" placeholder="Search crop..." class="w-full mb-6 p-3 border rounded-lg" oninput="filterCrops()">

      <!-- Crop Info -->
      <div id="crop-info" class="mb-6 p-4 bg-blue-50 rounded-lg">
        <div class="text-center text-gray-500">
          Select a crop to view details
        </div>
      </div>

      <!-- Fertilizer Schedule -->
      <div class="mb-6">
        <h2 class="text-xl font-semibold text-blue-900 mb-3">Fertilizer Schedule</h2>
        <div id="fertilizer-schedule" class="space-y-3">
          <div class="text-center text-gray-500 p-4">
            Crop details will appear here
          </div>
        </div>
      </div>

      <!-- Pesticide Schedule -->
      <div>
        <h2 class="text-xl font-semibold text-blue-900 mb-3">Pesticide Schedule</h2>
        <div id="pesticide-schedule" class="space-y-3">
          <div class="text-center text-gray-500 p-4">
            Crop details will appear here
          </div>
        </div>
      </div>
    </div>
  </div>

  <script type="text/javascript">
    function googleTranslateElementInit() {
      new google.translate.TranslateElement({
        pageLanguage: 'en',
        includedLanguages: 'en,hi,ta,te,ml,kn,gu,bn,mr,pa,ur',
        layout: google.translate.TranslateElement.InlineLayout.SIMPLE
      }, 'google_translate_element');
    }
  </script>
  <script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
  

  <script>
    // CORRECT API URLs - Using your actual Render URL
    const RECOMMEND_API = "https://krishirecommend-api.onrender.com/recommend";
    const HEALTH_API = "https://krishirecommend-api.onrender.com/health";

    // Dark mode functionality
    document.addEventListener('DOMContentLoaded', function() {
        const themeToggle = document.getElementById('theme-toggle');
        const currentTheme = localStorage.getItem('theme') || 'light';
        
        if (currentTheme === 'dark') {
            document.body.classList.add('dark-mode');
            themeToggle.textContent = '‚òÄÔ∏è';
        }

        themeToggle.addEventListener('click', function() {
            document.body.classList.toggle('dark-mode');
            
            if (document.body.classList.contains('dark-mode')) {
                localStorage.setItem('theme', 'dark');
                themeToggle.textContent = '‚òÄÔ∏è';
            } else {
                localStorage.setItem('theme', 'light');
                themeToggle.textContent = 'üåô';
            }
        });

        // More dropdown functionality
        document.getElementById('moreDropdown').addEventListener('change', function () {
            const selectedValue = this.value;
            if (selectedValue) {
                window.location.href = selectedValue;
            }
        });

        // Check API status on load
        checkAPIStatus();
        
        // Load crop data
        loadCropsData();
    });

    // ---------------------- API STATUS CHECK ----------------------
    async function checkAPIStatus() {
      try {
        const response = await fetch(HEALTH_API);
        const data = await response.json();
        
        const statusElement = document.getElementById('apiStatus');
        statusElement.className = 'api-status mx-6 mt-4 p-3 rounded text-sm';
        
        if (data.status === 'healthy') {
          statusElement.innerHTML = `‚úÖ API Connected | Model: ${data.model_loaded ? 'Loaded' : 'Not Loaded'} | Service: ${data.service || 'Crop Recommendation'}`;
          statusElement.style.background = '#d1fae5';
          statusElement.style.color = '#065f46';
        } else {
          statusElement.innerHTML = '‚ö†Ô∏è API Issues - Check connection';
          statusElement.style.background = '#fef3c7';
          statusElement.style.color = '#92400e';
        }
        statusElement.classList.remove('hidden');
      } catch (error) {
        console.error("API status check failed:", error);
        const statusElement = document.getElementById('apiStatus');
        statusElement.innerHTML = '‚ùå API Offline - Please check deployment';
        statusElement.style.background = '#fee2e2';
        statusElement.style.color = '#991b1b';
        statusElement.classList.remove('hidden');
      }
    }

    // ---------------------- CROP RECOMMENDATION ----------------------
    async function recommendCrop() {
      const resultDiv = document.getElementById("result");
      
      // Get form values
      const payload = {
        N: parseFloat(document.getElementById("n").value),
        P: parseFloat(document.getElementById("p").value),
        K: parseFloat(document.getElementById("k").value),
        temperature: parseFloat(document.getElementById("temperature").value),
        humidity: parseFloat(document.getElementById("humidity").value),
        ph: parseFloat(document.getElementById("ph").value),
        rainfall: parseFloat(document.getElementById("rainfall").value),
        season: document.getElementById("season").value
      };

      // Validate inputs
      for (const [key, value] of Object.entries(payload)) {
        if (isNaN(value) && key !== 'season') {
          resultDiv.innerHTML = `<div class="bg-red-50 text-red-700 p-4 rounded">‚ùå Please enter a valid number for ${key}</div>`;
          return;
        }
      }

      // Validate season (it's a string, not a number)
      if (!payload.season) {
        resultDiv.innerHTML = `<div class="bg-red-50 text-red-700 p-4 rounded">‚ùå Please select a season</div>`;
        return;
      }

      resultDiv.innerHTML = `<div class="bg-blue-50 text-blue-700 p-4 rounded">üîÑ Analyzing soil and weather conditions...</div>`;

      try {
        const response = await fetch(RECOMMEND_API, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || `API error: ${response.status}`);
        }

        const data = await response.json();

        if (data.success) {
          // Display recommendation
          resultDiv.innerHTML = `
            <div class="bg-green-50 text-green-800 p-4 rounded-lg border border-green-200">
              <div class="text-center mb-3">
                <span class="text-2xl">üåæ</span>
                <h3 class="text-xl font-bold mt-2">Recommended Crop</h3>
              </div>
              <div class="text-center mb-4">
                <span class="text-3xl font-bold text-green-600">${data.recommended_crop}</span>
              </div>
              <div class="grid grid-cols-2 gap-4 text-sm">
                <div class="bg-white p-2 rounded">
                  <strong>Soil Analysis:</strong><br>
                  N: ${data.soil_analysis.nitrogen} | P: ${data.soil_analysis.phosphorus}<br>
                  K: ${data.soil_analysis.potassium} | pH: ${data.soil_analysis.ph_level}
                </div>
                <div class="bg-white p-2 rounded">
                  <strong>Weather:</strong><br>
                  Temp: ${data.weather_conditions.temperature}¬∞C<br>
                  Humidity: ${data.weather_conditions.humidity}%<br>
                  Rainfall: ${data.weather_conditions.rainfall}mm
                </div>
              </div>
              <div class="text-center mt-3 text-xs text-gray-600">
                Season: ${data.season} | Confidence: ${data.confidence}
              </div>
            </div>
          `;

          // Update crop details if available
          if (window.crops && window.crops.length > 0) {
            const crop = window.crops.find(c => c.name.toLowerCase() === data.recommended_crop.toLowerCase());
            if (crop) {
              updateCropDetails(crop);
            }
          }
        } else {
          resultDiv.innerHTML = `<div class="bg-red-50 text-red-700 p-4 rounded">‚ö† ${data.error}</div>`;
        }
      } catch (error) {
        console.error("Recommendation error:", error);
        resultDiv.innerHTML = `<div class="bg-red-50 text-red-700 p-4 rounded">‚ùå Error: ${error.message}</div>`;
      }
    }

    // ---------------------- CROP DATA LOADING ----------------------
    async function loadCropsData() {
      try {
        const response = await fetch('crops.json');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        window.crops = data.crops;
        console.log('Crops data loaded successfully:', window.crops.length, 'crops');
      } catch (error) {
        console.error('Error loading crops data:', error);
        // Create some default crops data if file not found
        window.crops = [
          {
            name: "Rice",
            season: "Monsoon",
            sowing_period: "June-July",
            harvest_period: "October-November",
            fertilizer_schedule: [],
            pesticide_schedule: []
          },
          {
            name: "Wheat", 
            season: "Winter",
            sowing_period: "November-December",
            harvest_period: "March-April",
            fertilizer_schedule: [],
            pesticide_schedule: []
          }
        ];
      }
    }

    // ---------------------- CROP SCHEDULER FUNCTIONS ----------------------
    function formatDate(days) {
      const today = new Date();
      today.setDate(today.getDate() + days);
      return today.toLocaleDateString(undefined, { month: 'long', day: 'numeric' });
    }

    function filterCrops() {
      const input = document.getElementById("crop-search").value.toLowerCase();
      if (window.crops && window.crops.length > 0) {
        const crop = window.crops.find(c => c.name.toLowerCase().startsWith(input));
        if (crop) {
          updateCropDetails(crop);
        } else {
          document.getElementById("crop-info").innerHTML = `
            <div class="text-center text-gray-500 p-4">
              No crop found with name: "${input}"
            </div>
          `;
        }
      }
    }

    function updateCropDetails(crop) {
      document.getElementById("crop-info").innerHTML = `
        <div class="p-4 bg-green-50 rounded-lg border border-green-200">
          <p class="font-semibold text-lg text-green-800">${crop.name}</p>
          <p><strong>Season:</strong> ${crop.season}</p>
          <p><strong>Sowing Period:</strong> ${crop.sowing_period}</p>
          <p><strong>Harvest Period:</strong> ${crop.harvest_period}</p>
        </div>
      `;

      const renderSchedule = (schedule, containerId) => {
        const container = document.getElementById(containerId);
        container.innerHTML = '';
        
        if (schedule && schedule.length > 0) {
          schedule.forEach(item => {
            const div = document.createElement('div');
            div.className = 'bg-blue-100 hover:scale-105 hover:shadow-lg transition transform duration-300 rounded-lg p-4 cursor-pointer flex items-start space-x-4';
            div.innerHTML = `
              <div class="flex-shrink-0">
                <div class="bg-blue-500 text-white w-12 h-12 flex items-center justify-center rounded-full text-sm font-bold animate-pulse">
                  ${item.days_after_planting}d
                </div>
                <div class="mt-1 text-xs text-center">üìÖ ${formatDate(item.days_after_planting)}</div>
              </div>
              <div class="flex-1">
                <h3 class="text-blue-900 font-semibold">${item.stage}</h3>
                <p class="text-sm text-gray-700">${item.application}</p>
                <div class="extra-info mt-2 hidden bg-blue-50 p-3 rounded-lg border text-sm text-gray-600">${item.extra_info || 'No additional info available.'}</div>
              </div>
            `;
            div.addEventListener('click', () => {
              const info = div.querySelector('.extra-info');
              const wasVisible = !info.classList.contains('hidden');
              document.querySelectorAll('.extra-info').forEach(el => el.classList.add('hidden'));
              if (!wasVisible) info.classList.remove('hidden');
            });
            container.appendChild(div);
          });
        } else {
          container.innerHTML = '<div class="text-center text-gray-500 p-4">No schedule available</div>';
        }
      };

      renderSchedule(crop.fertilizer_schedule, 'fertilizer-schedule');
      renderSchedule(crop.pesticide_schedule, 'pesticide-schedule');
    }
  </script>
</body>
</html>

The above code is a working implementation of the crop recommendation system. It takes input values, sends them to the API, and then fetches the results as shown in the example. Please implement this process in the croprecommendation.tsx file using the same input values as in the working code. Remove the existing parameters in the crop recommendation system, include the specified input values, and display the output within the crop recommendation system. Do not change the crop scheduling functionality.use the same ui.